''' This model is used for process from the .dat file into pandas Datafram. '''

import numpy as np
import pandas as pd


def dic_select(my_dict, keys_to_keep):
    ''' This function select part of dict by keys and return the selected. '''
    selected_dict =  \
        {key: my_dict[key] for key in keys_to_keep if key in my_dict}
    return selected_dict


def get_paths(filenames: list, folder: str):
    '''
    This function receives a list of file names and returns a list of paths
    e.g.

    folder = 'ExperimentData/4F-BA2MnCl4/'
    filenames = ['0P01T_ZFC.DAT','0P01T_FC.DAT']

    >>> paths(filenames,folder)
    ['ExperimentData/4F-BA2MnCl4/0P01T_ZFC.DAT',
     'ExperimentData/4F-BA2MnCl4/0P01T_FC.DAT']

    '''
    return [folder+name for name in filenames]


def dat_2_dataframe(paths: list, SAMPLE_MOLE, mode) -> dict:
    '''
    This function read the data at the given paths and
    transform them into Pandas Dataframe format, stored in a dictionary.

    Args:
    - paths,list: paths to the .dat file. generated by the paths function.

    Returns:
    - ():
    A dictionary with keys the paths and values the corresponding DataFrames

    '''

    data_dic = {}

    # Read the data and sperate it by line.
    for path in paths:

        key = path.split('/')[-1].split('.')[0]

        data = pd.read_csv(path, delimiter='\t')

        # Retrieve index of the line has value '[DATA]', where the data begins.
        header = data.loc[data['[Header]'] == '[Data]'].index[0]

        # The next line of [DATA] will be the names measured properties.
        # They will be used as columns names of the DataFrame
        # e.x. ['Time Stamp (sec)','Temperature (K)',
        #       'Magnetic Field (Oe)', 'Moment (emu)'...]

        columns = data.iloc[header+1].iloc[0].split(',')

        # Give values a basis to c_ from. Not sure if there's a better way.
        values = np.zeros(len(columns))

        # concate all data line into a matrix.
        for i in range(header+2, len(data)):
            values = np.c_[values, data.iloc[i].iloc[0].split(',')]

        # Convert the data Matrix into Dataframe
        # using the columns names read above.
        target_dataframe = pd.DataFrame(values.T, columns=columns)

        # Remove the basis generated by np.zeros() above.
        target_dataframe = target_dataframe.drop(0)

        # Transform the dataframe into only the data we want.
        target_dataframe = dataframe_transfrom(
            path, target_dataframe, SAMPLE_MOLE, mode)

        data_dic[key] = target_dataframe

    return data_dic


def retrieve_h(path: str):
    '''
    This function retrieve the operating H from the path. e.g.
    >>> retrive_h('ExperimentData/4F-BA2MnCl4/0P01T_ZFC.DAT')
    0.01
    '''

    name = path.split('/')[-1]
    H = float(name.split('_')[0][:-1].replace('P', '.'))

    return H


def dataframe_transfrom(path, dataframe, SAMPLE_MOLE: float, mode):
    '''
    This function reduce the original 50 columns to columns interested.
    such as, 'Temperature (K)','Moment (emu)','M. Std. Err. (emu)'...

    '''
    
    # Drop the rows those does not have a mag_moment value.
    dataframe = dataframe[dataframe['Moment (emu)'] != '']

    # Initialize a new dataframe for return
    df = pd.DataFrame()

    # Filling the data we interested into this new df.
    df['Magnetic Field (Tesla)'] = \
        dataframe['Magnetic Field (Oe)'].astype('float64')/10000

    df['Temperature (K)'] = dataframe['Temperature (K)'].astype('float64')

    df['Moment (emu / gram)'] = \
        dataframe['Moment (emu)'].astype('float64')/SAMPLE_MOLE

    df['M. Std. Err. (emu)'] = \
        dataframe['M. Std. Err. (emu)'].astype('float64')

    if mode == 'T':
        H = retrieve_h(path)
    elif mode == 'H':
        H = df['Magnetic Field (Tesla)']
    else:
        raise ValueError("Mode has to be 'H' or 'T'! ")

    df['Magnetisation (emu / gram)'] = df['Moment (emu / gram)']/H
    # In the definition of DC susceptibility,
    # the magnetisation divided by the magnetic
    # field is also the susceptibility.
    df['Magnetisation Inverse (gram / emu)'] = \
        1 / df['Magnetisation (emu / gram)']

    return df
